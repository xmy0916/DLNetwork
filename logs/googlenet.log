nohup: ignoring input
GoogLeNet(
  (conv1): BasicConv2d(
    (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
  (conv2): BasicConv2d(
    (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (conv3): BasicConv2d(
    (conv): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception3a): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(192, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception3b): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (maxpool3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception4a): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(480, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(480, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(96, 208, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(208, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(480, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(480, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception4b): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(512, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(112, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(224, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(24, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception4c): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(24, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception4d): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(144, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception4e): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(528, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(528, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(528, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(528, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception5a): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(832, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(832, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(832, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (inception5b): Inception(
    (branch1): BasicConv2d(
      (conv): Conv2d(832, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(832, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Conv2d(832, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicConv2d(
        (conv): Conv2d(48, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=True)
      (1): BasicConv2d(
        (conv): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (aux1): None
  (aux2): None
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.2, inplace=False)
  (fc): Linear(in_features=1024, out_features=10, bias=True)
)
{'model': <function googlenet at 0x7fb37b395048>, 'pretrained': True, 'epoch': 5, 'num_class': 10, 'save_path': 'params/googlenet.pth', 'input_size': (112, 112), 'batch_size': (8, 1000), 'lr': 0.0001}
[1,     1] train_loss: 0.098  test_accuracy: 0.113
[1,   101] train_loss: 4.912  test_accuracy: 0.484
[1,   201] train_loss: 2.544  test_accuracy: 0.579
[1,   301] train_loss: 2.196  test_accuracy: 0.660
[1,   401] train_loss: 1.894  test_accuracy: 0.705
[1,   501] train_loss: 1.633  test_accuracy: 0.708
[1,   601] train_loss: 1.423  test_accuracy: 0.737
[1,   701] train_loss: 1.448  test_accuracy: 0.760
[1,   801] train_loss: 1.185  test_accuracy: 0.770
[1,   901] train_loss: 1.151  test_accuracy: 0.781
[1,  1001] train_loss: 1.139  test_accuracy: 0.787
[1,  1101] train_loss: 0.996  test_accuracy: 0.799
[1,  1201] train_loss: 0.956  test_accuracy: 0.783
[1,  1301] train_loss: 0.970  test_accuracy: 0.792
[1,  1401] train_loss: 0.987  test_accuracy: 0.816
[1,  1501] train_loss: 0.850  test_accuracy: 0.829
[1,  1601] train_loss: 0.895  test_accuracy: 0.830
[1,  1701] train_loss: 0.985  test_accuracy: 0.829
[1,  1801] train_loss: 0.896  test_accuracy: 0.826
[1,  1901] train_loss: 0.923  test_accuracy: 0.830
[1,  2001] train_loss: 0.918  test_accuracy: 0.858
[1,  2101] train_loss: 0.915  test_accuracy: 0.851
[1,  2201] train_loss: 0.776  test_accuracy: 0.843
[1,  2301] train_loss: 0.747  test_accuracy: 0.831
[1,  2401] train_loss: 0.789  test_accuracy: 0.839
[1,  2501] train_loss: 0.790  test_accuracy: 0.856
[1,  2601] train_loss: 0.772  test_accuracy: 0.881
[1,  2701] train_loss: 0.736  test_accuracy: 0.857
[1,  2801] train_loss: 0.698  test_accuracy: 0.857
[1,  2901] train_loss: 0.695  test_accuracy: 0.859
[1,  3001] train_loss: 0.691  test_accuracy: 0.843
[1,  3101] train_loss: 0.703  test_accuracy: 0.851
[1,  3201] train_loss: 0.675  test_accuracy: 0.864
[1,  3301] train_loss: 0.615  test_accuracy: 0.869
[1,  3401] train_loss: 0.728  test_accuracy: 0.865
[1,  3501] train_loss: 0.629  test_accuracy: 0.870
[1,  3601] train_loss: 0.578  test_accuracy: 0.887
[1,  3701] train_loss: 0.591  test_accuracy: 0.876
[1,  3801] train_loss: 0.678  test_accuracy: 0.882
[1,  3901] train_loss: 0.653  test_accuracy: 0.868
[1,  4001] train_loss: 0.594  test_accuracy: 0.878
[1,  4101] train_loss: 0.686  test_accuracy: 0.874
[1,  4201] train_loss: 0.705  test_accuracy: 0.891
[1,  4301] train_loss: 0.649  test_accuracy: 0.877
[1,  4401] train_loss: 0.719  test_accuracy: 0.875
[1,  4501] train_loss: 0.530  test_accuracy: 0.882
[1,  4601] train_loss: 0.569  test_accuracy: 0.883
[1,  4701] train_loss: 0.652  test_accuracy: 0.876
[1,  4801] train_loss: 0.581  test_accuracy: 0.888
[1,  4901] train_loss: 0.499  test_accuracy: 0.887
[1,  5001] train_loss: 0.512  test_accuracy: 0.883
[1,  5101] train_loss: 0.519  test_accuracy: 0.875
[1,  5201] train_loss: 0.545  test_accuracy: 0.891
[1,  5301] train_loss: 0.572  test_accuracy: 0.889
[1,  5401] train_loss: 0.631  test_accuracy: 0.876
[1,  5501] train_loss: 0.650  test_accuracy: 0.871
[1,  5601] train_loss: 0.551  test_accuracy: 0.893
[1,  5701] train_loss: 0.543  test_accuracy: 0.869
[1,  5801] train_loss: 0.616  test_accuracy: 0.881
[1,  5901] train_loss: 0.561  test_accuracy: 0.883
[1,  6001] train_loss: 0.608  test_accuracy: 0.888
[1,  6101] train_loss: 0.476  test_accuracy: 0.895
[1,  6201] train_loss: 0.584  test_accuracy: 0.881
[2,     1] train_loss: 0.005  test_accuracy: 0.880
[2,   101] train_loss: 0.560  test_accuracy: 0.900
[2,   201] train_loss: 0.520  test_accuracy: 0.886
[2,   301] train_loss: 0.421  test_accuracy: 0.887
[2,   401] train_loss: 0.469  test_accuracy: 0.888
[2,   501] train_loss: 0.484  test_accuracy: 0.884
[2,   601] train_loss: 0.442  test_accuracy: 0.893
[2,   701] train_loss: 0.536  test_accuracy: 0.892
[2,   801] train_loss: 0.434  test_accuracy: 0.913
[2,   901] train_loss: 0.372  test_accuracy: 0.897
[2,  1001] train_loss: 0.490  test_accuracy: 0.906
[2,  1101] train_loss: 0.441  test_accuracy: 0.901
[2,  1201] train_loss: 0.461  test_accuracy: 0.897
[2,  1301] train_loss: 0.394  test_accuracy: 0.902
[2,  1401] train_loss: 0.395  test_accuracy: 0.888
[2,  1501] train_loss: 0.439  test_accuracy: 0.903
[2,  1601] train_loss: 0.402  test_accuracy: 0.895
[2,  1701] train_loss: 0.477  test_accuracy: 0.909
[2,  1801] train_loss: 0.451  test_accuracy: 0.893
[2,  1901] train_loss: 0.368  test_accuracy: 0.891
[2,  2001] train_loss: 0.437  test_accuracy: 0.898
[2,  2101] train_loss: 0.428  test_accuracy: 0.912
[2,  2201] train_loss: 0.377  test_accuracy: 0.898
[2,  2301] train_loss: 0.360  test_accuracy: 0.895
[2,  2401] train_loss: 0.390  test_accuracy: 0.903
[2,  2501] train_loss: 0.387  test_accuracy: 0.903
[2,  2601] train_loss: 0.385  test_accuracy: 0.906
[2,  2701] train_loss: 0.348  test_accuracy: 0.903
[2,  2801] train_loss: 0.391  test_accuracy: 0.908
[2,  2901] train_loss: 0.392  test_accuracy: 0.906
[2,  3001] train_loss: 0.377  test_accuracy: 0.895
[2,  3101] train_loss: 0.336  test_accuracy: 0.900
[2,  3201] train_loss: 0.378  test_accuracy: 0.889
[2,  3301] train_loss: 0.376  test_accuracy: 0.891
[2,  3401] train_loss: 0.412  test_accuracy: 0.898
[2,  3501] train_loss: 0.319  test_accuracy: 0.905
[2,  3601] train_loss: 0.316  test_accuracy: 0.914
[2,  3701] train_loss: 0.297  test_accuracy: 0.899
[2,  3801] train_loss: 0.329  test_accuracy: 0.915
[2,  3901] train_loss: 0.360  test_accuracy: 0.911
[2,  4001] train_loss: 0.293  test_accuracy: 0.903
[2,  4101] train_loss: 0.369  test_accuracy: 0.904
[2,  4201] train_loss: 0.399  test_accuracy: 0.903
[2,  4301] train_loss: 0.299  test_accuracy: 0.897
[2,  4401] train_loss: 0.396  test_accuracy: 0.912
[2,  4501] train_loss: 0.302  test_accuracy: 0.910
[2,  4601] train_loss: 0.286  test_accuracy: 0.896
[2,  4701] train_loss: 0.312  test_accuracy: 0.901
[2,  4801] train_loss: 0.252  test_accuracy: 0.914
[2,  4901] train_loss: 0.295  test_accuracy: 0.896
[2,  5001] train_loss: 0.293  test_accuracy: 0.897
[2,  5101] train_loss: 0.274  test_accuracy: 0.907
[2,  5201] train_loss: 0.271  test_accuracy: 0.911
[2,  5301] train_loss: 0.269  test_accuracy: 0.900
[2,  5401] train_loss: 0.309  test_accuracy: 0.911
[2,  5501] train_loss: 0.309  test_accuracy: 0.899
[2,  5601] train_loss: 0.278  test_accuracy: 0.913
[2,  5701] train_loss: 0.289  test_accuracy: 0.902
[2,  5801] train_loss: 0.344  test_accuracy: 0.897
[2,  5901] train_loss: 0.334  test_accuracy: 0.900
[2,  6001] train_loss: 0.310  test_accuracy: 0.906
[2,  6101] train_loss: 0.267  test_accuracy: 0.913
[2,  6201] train_loss: 0.251  test_accuracy: 0.915
[3,     1] train_loss: 0.003  test_accuracy: 0.889
[3,   101] train_loss: 0.253  test_accuracy: 0.900
[3,   201] train_loss: 0.284  test_accuracy: 0.896
[3,   301] train_loss: 0.224  test_accuracy: 0.912
[3,   401] train_loss: 0.209  test_accuracy: 0.912
[3,   501] train_loss: 0.246  test_accuracy: 0.906
[3,   601] train_loss: 0.251  test_accuracy: 0.907
[3,   701] train_loss: 0.241  test_accuracy: 0.910
[3,   801] train_loss: 0.240  test_accuracy: 0.920
[3,   901] train_loss: 0.227  test_accuracy: 0.892
[3,  1001] train_loss: 0.261  test_accuracy: 0.909
[3,  1101] train_loss: 0.220  test_accuracy: 0.911
[3,  1201] train_loss: 0.241  test_accuracy: 0.926
[3,  1301] train_loss: 0.241  test_accuracy: 0.923
[3,  1401] train_loss: 0.241  test_accuracy: 0.902
[3,  1501] train_loss: 0.225  test_accuracy: 0.900
[3,  1601] train_loss: 0.230  test_accuracy: 0.905
[3,  1701] train_loss: 0.227  test_accuracy: 0.911
[3,  1801] train_loss: 0.207  test_accuracy: 0.912
[3,  1901] train_loss: 0.227  test_accuracy: 0.907
[3,  2001] train_loss: 0.270  test_accuracy: 0.905
[3,  2101] train_loss: 0.258  test_accuracy: 0.920
[3,  2201] train_loss: 0.242  test_accuracy: 0.924
[3,  2301] train_loss: 0.200  test_accuracy: 0.917
[3,  2401] train_loss: 0.230  test_accuracy: 0.918
[3,  2501] train_loss: 0.167  test_accuracy: 0.919
[3,  2601] train_loss: 0.222  test_accuracy: 0.908
[3,  2701] train_loss: 0.186  test_accuracy: 0.915
[3,  2801] train_loss: 0.190  test_accuracy: 0.920
[3,  2901] train_loss: 0.207  test_accuracy: 0.914
[3,  3001] train_loss: 0.182  test_accuracy: 0.916
[3,  3101] train_loss: 0.198  test_accuracy: 0.902
[3,  3201] train_loss: 0.238  test_accuracy: 0.901
[3,  3301] train_loss: 0.188  test_accuracy: 0.914
[3,  3401] train_loss: 0.230  test_accuracy: 0.899
[3,  3501] train_loss: 0.195  test_accuracy: 0.911
[3,  3601] train_loss: 0.201  test_accuracy: 0.903
[3,  3701] train_loss: 0.179  test_accuracy: 0.911
[3,  3801] train_loss: 0.164  test_accuracy: 0.916
[3,  3901] train_loss: 0.242  test_accuracy: 0.923
[3,  4001] train_loss: 0.165  test_accuracy: 0.911
[3,  4101] train_loss: 0.193  test_accuracy: 0.911
[3,  4201] train_loss: 0.190  test_accuracy: 0.914
[3,  4301] train_loss: 0.194  test_accuracy: 0.914
[3,  4401] train_loss: 0.210  test_accuracy: 0.913
[3,  4501] train_loss: 0.185  test_accuracy: 0.925
[3,  4601] train_loss: 0.166  test_accuracy: 0.912
[3,  4701] train_loss: 0.184  test_accuracy: 0.918
[3,  4801] train_loss: 0.162  test_accuracy: 0.910
[3,  4901] train_loss: 0.143  test_accuracy: 0.912
[3,  5001] train_loss: 0.161  test_accuracy: 0.923
[3,  5101] train_loss: 0.124  test_accuracy: 0.920
[3,  5201] train_loss: 0.170  test_accuracy: 0.918
[3,  5301] train_loss: 0.196  test_accuracy: 0.905
[3,  5401] train_loss: 0.198  test_accuracy: 0.913
[3,  5501] train_loss: 0.180  test_accuracy: 0.910
[3,  5601] train_loss: 0.135  test_accuracy: 0.918
[3,  5701] train_loss: 0.182  test_accuracy: 0.918
[3,  5801] train_loss: 0.171  test_accuracy: 0.906
[3,  5901] train_loss: 0.172  test_accuracy: 0.908
[3,  6001] train_loss: 0.145  test_accuracy: 0.912
[3,  6101] train_loss: 0.112  test_accuracy: 0.919
[3,  6201] train_loss: 0.178  test_accuracy: 0.897
[4,     1] train_loss: 0.000  test_accuracy: 0.896
[4,   101] train_loss: 0.181  test_accuracy: 0.904
[4,   201] train_loss: 0.215  test_accuracy: 0.907
[4,   301] train_loss: 0.157  test_accuracy: 0.905
[4,   401] train_loss: 0.119  test_accuracy: 0.910
[4,   501] train_loss: 0.138  test_accuracy: 0.893
[4,   601] train_loss: 0.133  test_accuracy: 0.905
[4,   701] train_loss: 0.234  test_accuracy: 0.905
[4,   801] train_loss: 0.148  test_accuracy: 0.904
[4,   901] train_loss: 0.158  test_accuracy: 0.900
[4,  1001] train_loss: 0.173  test_accuracy: 0.913
[4,  1101] train_loss: 0.142  test_accuracy: 0.919
[4,  1201] train_loss: 0.106  test_accuracy: 0.913
[4,  1301] train_loss: 0.158  test_accuracy: 0.927
[4,  1401] train_loss: 0.141  test_accuracy: 0.924
[4,  1501] train_loss: 0.163  test_accuracy: 0.913
[4,  1601] train_loss: 0.150  test_accuracy: 0.916
[4,  1701] train_loss: 0.123  test_accuracy: 0.916
[4,  1801] train_loss: 0.134  test_accuracy: 0.913
[4,  1901] train_loss: 0.109  test_accuracy: 0.912
[4,  2001] train_loss: 0.184  test_accuracy: 0.922
[4,  2101] train_loss: 0.174  test_accuracy: 0.919
[4,  2201] train_loss: 0.122  test_accuracy: 0.919
[4,  2301] train_loss: 0.181  test_accuracy: 0.924
[4,  2401] train_loss: 0.155  test_accuracy: 0.912
[4,  2501] train_loss: 0.173  test_accuracy: 0.907
[4,  2601] train_loss: 0.175  test_accuracy: 0.904
[4,  2701] train_loss: 0.123  test_accuracy: 0.917
[4,  2801] train_loss: 0.157  test_accuracy: 0.915
[4,  2901] train_loss: 0.208  test_accuracy: 0.914
[4,  3001] train_loss: 0.109  test_accuracy: 0.915
[4,  3101] train_loss: 0.159  test_accuracy: 0.907
[4,  3201] train_loss: 0.148  test_accuracy: 0.901
[4,  3301] train_loss: 0.145  test_accuracy: 0.914
[4,  3401] train_loss: 0.129  test_accuracy: 0.915
[4,  3501] train_loss: 0.156  test_accuracy: 0.911
[4,  3601] train_loss: 0.126  test_accuracy: 0.919
[4,  3701] train_loss: 0.092  test_accuracy: 0.925
[4,  3801] train_loss: 0.144  test_accuracy: 0.914
[4,  3901] train_loss: 0.142  test_accuracy: 0.911
[4,  4001] train_loss: 0.139  test_accuracy: 0.907
[4,  4101] train_loss: 0.129  test_accuracy: 0.916
[4,  4201] train_loss: 0.167  test_accuracy: 0.921
[4,  4301] train_loss: 0.119  test_accuracy: 0.920
[4,  4401] train_loss: 0.166  test_accuracy: 0.910
[4,  4501] train_loss: 0.157  test_accuracy: 0.921
[4,  4601] train_loss: 0.158  test_accuracy: 0.922
[4,  4701] train_loss: 0.140  test_accuracy: 0.908
[4,  4801] train_loss: 0.142  test_accuracy: 0.921
[4,  4901] train_loss: 0.105  test_accuracy: 0.920
[4,  5001] train_loss: 0.135  test_accuracy: 0.906
[4,  5101] train_loss: 0.082  test_accuracy: 0.909
[4,  5201] train_loss: 0.117  test_accuracy: 0.911
[4,  5301] train_loss: 0.101  test_accuracy: 0.906
[4,  5401] train_loss: 0.128  test_accuracy: 0.915
[4,  5501] train_loss: 0.124  test_accuracy: 0.918
[4,  5601] train_loss: 0.134  test_accuracy: 0.918
[4,  5701] train_loss: 0.114  test_accuracy: 0.921
[4,  5801] train_loss: 0.137  test_accuracy: 0.912
[4,  5901] train_loss: 0.132  test_accuracy: 0.910
[4,  6001] train_loss: 0.098  test_accuracy: 0.911
[4,  6101] train_loss: 0.108  test_accuracy: 0.919
[4,  6201] train_loss: 0.124  test_accuracy: 0.920
[5,     1] train_loss: 0.000  test_accuracy: 0.907
[5,   101] train_loss: 0.104  test_accuracy: 0.912
[5,   201] train_loss: 0.142  test_accuracy: 0.902
[5,   301] train_loss: 0.102  test_accuracy: 0.912
[5,   401] train_loss: 0.132  test_accuracy: 0.913
[5,   501] train_loss: 0.098  test_accuracy: 0.917
[5,   601] train_loss: 0.162  test_accuracy: 0.918
[5,   701] train_loss: 0.120  test_accuracy: 0.919
[5,   801] train_loss: 0.121  test_accuracy: 0.921
[5,   901] train_loss: 0.120  test_accuracy: 0.917
[5,  1001] train_loss: 0.091  test_accuracy: 0.922
[5,  1101] train_loss: 0.068  test_accuracy: 0.924
[5,  1201] train_loss: 0.101  test_accuracy: 0.922
[5,  1301] train_loss: 0.150  test_accuracy: 0.921
[5,  1401] train_loss: 0.120  test_accuracy: 0.915
[5,  1501] train_loss: 0.109  test_accuracy: 0.932
[5,  1601] train_loss: 0.112  test_accuracy: 0.926
[5,  1701] train_loss: 0.109  test_accuracy: 0.927
[5,  1801] train_loss: 0.107  test_accuracy: 0.926
[5,  1901] train_loss: 0.095  test_accuracy: 0.923
[5,  2001] train_loss: 0.151  test_accuracy: 0.919
[5,  2101] train_loss: 0.142  test_accuracy: 0.913
[5,  2201] train_loss: 0.103  test_accuracy: 0.909
[5,  2301] train_loss: 0.117  test_accuracy: 0.907
[5,  2401] train_loss: 0.120  test_accuracy: 0.910
[5,  2501] train_loss: 0.131  test_accuracy: 0.909
[5,  2601] train_loss: 0.127  test_accuracy: 0.911
[5,  2701] train_loss: 0.087  test_accuracy: 0.914
[5,  2801] train_loss: 0.082  test_accuracy: 0.923
[5,  2901] train_loss: 0.156  test_accuracy: 0.907
[5,  3001] train_loss: 0.149  test_accuracy: 0.902
[5,  3101] train_loss: 0.132  test_accuracy: 0.914
[5,  3201] train_loss: 0.122  test_accuracy: 0.910
[5,  3301] train_loss: 0.144  test_accuracy: 0.921
[5,  3401] train_loss: 0.129  test_accuracy: 0.919
[5,  3501] train_loss: 0.120  test_accuracy: 0.917
[5,  3601] train_loss: 0.102  test_accuracy: 0.905
[5,  3701] train_loss: 0.095  test_accuracy: 0.915
[5,  3801] train_loss: 0.119  test_accuracy: 0.924
[5,  3901] train_loss: 0.142  test_accuracy: 0.913
[5,  4001] train_loss: 0.098  test_accuracy: 0.923
[5,  4101] train_loss: 0.099  test_accuracy: 0.906
[5,  4201] train_loss: 0.118  test_accuracy: 0.911
[5,  4301] train_loss: 0.079  test_accuracy: 0.904
[5,  4401] train_loss: 0.087  test_accuracy: 0.910
[5,  4501] train_loss: 0.063  test_accuracy: 0.916
[5,  4601] train_loss: 0.069  test_accuracy: 0.919
[5,  4701] train_loss: 0.125  test_accuracy: 0.915
[5,  4801] train_loss: 0.116  test_accuracy: 0.926
[5,  4901] train_loss: 0.097  test_accuracy: 0.925
[5,  5001] train_loss: 0.078  test_accuracy: 0.914
[5,  5101] train_loss: 0.110  test_accuracy: 0.907
[5,  5201] train_loss: 0.126  test_accuracy: 0.904
[5,  5301] train_loss: 0.096  test_accuracy: 0.918
[5,  5401] train_loss: 0.091  test_accuracy: 0.921
[5,  5501] train_loss: 0.142  test_accuracy: 0.913
[5,  5601] train_loss: 0.113  test_accuracy: 0.910
[5,  5701] train_loss: 0.106  test_accuracy: 0.922
[5,  5801] train_loss: 0.092  test_accuracy: 0.913
[5,  5901] train_loss: 0.133  test_accuracy: 0.914
[5,  6001] train_loss: 0.116  test_accuracy: 0.921
[5,  6101] train_loss: 0.116  test_accuracy: 0.915
[5,  6201] train_loss: 0.073  test_accuracy: 0.918
Finished Training
